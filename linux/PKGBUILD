# Maintainer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>
# Maintainer: Joaquín I. Aramendía (samsagax) <samsagaxg@gmail.com>

pkgbase=linux-chimeraos
pkgver=6.4.4.chos3
pkgrel=1
pkgdesc='Linux ChimeraOS'
_srctag=${pkgver%.*}
_srcpatch=${pkgver##*.}
url="https://github.com/ChimeraOS/linux-chimeraos"
arch=(x86_64)
license=(GPL2)
makedepends=(
  bc
  cpio
  gettext
  libelf
  pahole
  perl
  python
  tar
  xz

  # htmldocs
  #graphviz
  #imagemagick
  #python-sphinx
  #texlive-latexextra
)
options=('!strip')
_srcname=chimeraos-linux
source=(
  "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-$_srctag.tar.xz"
  config  # the main kernel config file

  # Arch Linux patches
  0001-ZEN-Add-sysctl-and-CONFIG-to-disallow-unprivileged-C.patch
  0002-tpm-tpm_tis-Disable-interrupts-only-for-AEON-UPX-i11.patch
  0003-tpm-tpm_tis-Disable-interrupts-for-Framework-Laptop-.patch
  0004-tpm-tpm_tis-Disable-interrupts-for-Framework-Laptop-.patch
  0005-tpm-tpm_tis-Disable-interrupts-for-Lenovo-L590-devic.patch
  0006-Bluetooth-btusb-Fix-bluetooth-on-Intel-Macbook-2014.patch

  # ChimeraOS specific patches
  # Some patches from TKG Team
  0001-mm-Support-soft-dirty-flag-reset-for-VA-range.patch

  # Fixes and additions
  0001-drm-panel-orientation-quirks-Add-quirk-for-AYA-NEO-2.patch
  0002-drm-panel-orientation-quirks-Add-quirk-for-AYA-NEO-F.patch
  0003-drm-panel-orientation-quirks-Add-quirk-for-AYA-NEO-G.patch
  0002-ALSA-hda-realtek-add-quirks-asus-ally-cs35l41.patch
  0003-asus-ally-asus-hid-6.3-v2.patch
  0001-hwmon-oxp-sensors-staged-changes-for-v6.5.patch
  0001-ACPI-resource-Remove-Zen-specific-match-and-quirks.patch

  # Asus Ally bluetooth patch
  0004-asus-ally-bluetooth.patch

  #HDR patches
  0001-HDR.patch

  #K10 powermonitoring
  0001-k10temp-add-power-and-current-monitoring.patch
)

validpgpkeys=(
  ABAF11C65A2970B130ABE3C479BE3E4300411886  # Linus Torvalds
  647F28654894E3BD457199BE38DBBDC86092693E  # Greg Kroah-Hartman
  A2FF3A36AAA56654109064AB19802F8B0D70FC30  # Jan Alexander Steffens (heftig)
  C7E7849466FE2358343588377258734B41C31549  # David Runge <dvzrv@archlinux.org>
)
b2sums=('1ab6c93da986dac6a07a5e3bc764f9d2a5bb9b8989321244455d894690634ac04364e6a3f960e8674f47ae22fc4ed09b18aa60cbf279636083e61aa6524f8a59'
        '2a44934a12b21f28cbb12dca410d3cca118c906cd94f14865a6243b4497ce4ba4bd07045d37b92b5654909a1d4d1d676f630c96630b2d0b78eb74c0be3a7fcc9'
        'ad5d71652af8dc9dfa262fd60edb209535f4a1dc4abe64939f1924912b9630251311c84c4868ba4633c02062c3678f1deaebe72b1e227d2187f68ea97bdb4432'
        '0308340dc1d10e7a00fb4111b3c12d5122552e70e6b029f826352bc5995fa8b925a06f5897bf81ada735fae587e675275e2fe129068d866bc7f69ff3835ebac6'
        'e57a5bdac4b3b87e780964c90d575178ae4f462a73f5f412b23aecc9dc05ffc9d7acaee288b4cab19a6adbad9b14a37b1212a274ce98a979d6038a010fc11879'
        '1b70b2c7c2010f898bf3cfdd0db0d5c0942f1754b56f32cadcdda9776b338fc444f6ceaa9a5da130a85df17d446dcb62fd567011ddbc1a47e12979417e4a2b9f'
        '5027c4f9084393a78f8dbef7d93b48c0d2cf484e04bced4e7359a15dbb40a5b0bc61ca9d424eb320fd2f00d52495c30b0886d891338a744c62cfec0d6c0f9db1'
        '85ca3c2d0b05ae13b3b526eb23523fa8702a728294af65033e4d1be46d38663800f39bdd7ec7b4fc837836b9150a0c76bfc84d1be59e410ec23570613aad697e'
        'e2e364387efe34a1a392cdf9801b6f164d84de428edd8e43ccb1f12690019078db297b9dcf61a5dd4a83ca40dca8f25d9117e240c1ffd8b969d81e4dc6e972fd'
        '0aabd614b3318880fe940d4f3eb93f8b7f0e91892864f95d5b12eabfce1650ef036bf4e2ccee8b391c8a3cef4ff1ff7661b118a4f72d82214dbf713743809f78'
        '5a578620cc03574218a22c1eebbba91047815f0c7b0b3f2f3d1eb5534aa17254f0ea5f061cadfe7bbe3b32f0a20b2008e28a494cfd7be84600c4b6a89afd6940'
        '4f8305d7b15763206e868d313b31372cc7e0df1b634d73f958d3c357c6859fd26e9490d0179f316b282b4058baae5365f5735eae157cceaa1a3acd7ee5e8d1c6'
        '3b8eb5599ec14f02c790586f7e3cc84e0035d997eb1b1add8567894b25e12e6cbdb63b0f8164f89cd8abc4fc6b6a4e8b927cb7dbadad215a35ff2ff191cf4695'
        '7e918baee2c0f5b36df13cca4ecd905e82902887a467b3d4e1851f2b3591790b955878b084ebbea0e75d78496bbf9452c66a1f30a00eaa96fd637c0b1d4497c2'
        'd61221e64b7b226b265bde2b75c8938db8c742786ba3e07964804f54aa9a7453de4ade56a139ac7cd059bfd711c610a45f41981743cb17156c1e7b87a29b4d6d'
        'd575cd8fa9763eae4d69e9fc5260289ae51f2e9a87dbcde08f89cc4db56742e52ecc9dd394139254dc37defcf4aa249fd92f8453147df7d294527035722c7843'
        '41162c86f54fcdf7dfbe575e23f8bde4efa8886b5db311945e03bccb353286e70f6e4e83aadc5e81102cfcb8cf1ddab31cbbe016df4237abc07e7a69bc8e5c52'
        'e82a079ddac373cefb7901f7a43b896a648d3f00535ce021a8ea722f0c84394e31871ec4fd7a8be82f521c9c8ef9836f82a652388af8b7ea46932515c538ff4d'
        '200352b41791cd97130bcd702c39fa5a0b90a9ca07c34c8b81dd7a3a5b9a2a92865479bd323cceacf0b700de72dcb011a24d6b61371c014657f8c28666b31c6e')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

_make() {
  test -s version
  make KERNELRELEASE="$(<version)" "$@"
}

prepare() {
  mv "linux-${_srctag}" $_srcname
  cd $_srcname

  echo "Setting version..."
  echo "${pkgbase#linux}" > localversion.10-pkgname
  echo "-$pkgrel" > localversion.20-pkgrel
  sed -i "s/EXTRAVERSION =/EXTRAVERSION = -${_srcpatch}/g" Makefile
  make defconfig
  make -s kernelrelease > version
  make mrproper

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  echo "Setting config..."
  cp ../config .config
  _make olddefconfig
  diff -u ../config .config || :

  echo "Prepared $pkgbase version $(<version)"
}

build() {
  cd $_srcname
  _make all
}

_package() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=(
    coreutils
    initramfs
    kmod
  )
  optdepends=(
    'wireless-regdb: to set the correct wireless channels of your country'
    'linux-firmware: firmware images needed for some devices'
  )
  provides=(
    KSMBD-MODULE
    VIRTUALBOX-GUEST-MODULES
    WIREGUARD-MODULE
  )
  replaces=(
    virtualbox-guest-modules-arch
    wireguard-arch
  )

  cd $_srcname
  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(_make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  ZSTD_CLEVEL=19 _make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

_package-docs() {
  pkgdesc="Documentation for the $pkgdesc kernel"

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing documentation..."
  local src dst
  while read -rd '' src; do
    dst="${src#Documentation/}"
    dst="$builddir/Documentation/${dst#output/}"
    install -Dm644 "$src" "$dst"
  done < <(find Documentation -name '.*' -prune -o ! -type d -print0)

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/share/doc"
  ln -sr "$builddir/Documentation" "$pkgdir/usr/share/doc/$pkgbase"
}

pkgname=(
  "$pkgbase"
  "$pkgbase-headers"
  #"$pkgbase-docs"
)
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
